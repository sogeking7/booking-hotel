/*
 * This file is generated by jOOQ.
 */
package org.todo.jooq.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.todo.jooq.model.Keys;
import org.todo.jooq.model.Public;
import org.todo.jooq.model.tables.Users.UsersPath;
import org.todo.jooq.model.tables.records.TodoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Todos extends TableImpl<TodoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.todos</code>
     */
    public static final Todos TODOS = new Todos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodoRecord> getRecordType() {
        return TodoRecord.class;
    }

    /**
     * The column <code>public.todos.id_</code>.
     */
    public final TableField<TodoRecord, Integer> ID = createField(DSL.name("id_"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.todos.title_</code>.
     */
    public final TableField<TodoRecord, String> TITLE = createField(DSL.name("title_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.todos.description_</code>.
     */
    public final TableField<TodoRecord, String> DESCRIPTION = createField(DSL.name("description_"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.todos.created_at_</code>.
     */
    public final TableField<TodoRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at_"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.todos.user_id_</code>.
     */
    public final TableField<TodoRecord, Integer> USER_ID = createField(DSL.name("user_id_"), SQLDataType.INTEGER.nullable(false), this, "");

    private Todos(Name alias, Table<TodoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Todos(Name alias, Table<TodoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.todos</code> table reference
     */
    public Todos(String alias) {
        this(DSL.name(alias), TODOS);
    }

    /**
     * Create an aliased <code>public.todos</code> table reference
     */
    public Todos(Name alias) {
        this(alias, TODOS);
    }

    /**
     * Create a <code>public.todos</code> table reference
     */
    public Todos() {
        this(DSL.name("todos"), null);
    }

    public <O extends Record> Todos(Table<O> path, ForeignKey<O, TodoRecord> childPath, InverseForeignKey<O, TodoRecord> parentPath) {
        super(path, childPath, parentPath, TODOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TodosPath extends Todos implements Path<TodoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TodosPath(Table<O> path, ForeignKey<O, TodoRecord> childPath, InverseForeignKey<O, TodoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TodosPath(Name alias, Table<TodoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TodosPath as(String alias) {
            return new TodosPath(DSL.name(alias), this);
        }

        @Override
        public TodosPath as(Name alias) {
            return new TodosPath(alias, this);
        }

        @Override
        public TodosPath as(Table<?> alias) {
            return new TodosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TodoRecord, Integer> getIdentity() {
        return (Identity<TodoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TodoRecord> getPrimaryKey() {
        return Keys.TODOS_PKEY;
    }

    @Override
    public List<ForeignKey<TodoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FK_USER, null);

        return _users;
    }

    @Override
    public Todos as(String alias) {
        return new Todos(DSL.name(alias), this);
    }

    @Override
    public Todos as(Name alias) {
        return new Todos(alias, this);
    }

    @Override
    public Todos as(Table<?> alias) {
        return new Todos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(String name) {
        return new Todos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Name name) {
        return new Todos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Table<?> name) {
        return new Todos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Condition condition) {
        return new Todos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
