/*
 * This file is generated by jOOQ.
 */
package org.booking_hotel.jooq.model.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.booking_hotel.jooq.model.Keys;
import org.booking_hotel.jooq.model.Public;
import org.booking_hotel.jooq.model.tables.records.HotelRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Hotels extends TableImpl<HotelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hotels</code>
     */
    public static final Hotels HOTELS = new Hotels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HotelRecord> getRecordType() {
        return HotelRecord.class;
    }

    /**
     * The column <code>public.hotels.id_</code>.
     */
    public final TableField<HotelRecord, Long> ID = createField(DSL.name("id_"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.hotels.created_at_</code>.
     */
    public final TableField<HotelRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at_"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.hotels.updated_at_</code>.
     */
    public final TableField<HotelRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at_"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.hotels.removed_</code>.
     */
    public final TableField<HotelRecord, Boolean> REMOVED = createField(DSL.name("removed_"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.hotels.name_</code>.
     */
    public final TableField<HotelRecord, String> NAME = createField(DSL.name("name_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.hotels.address_</code>.
     */
    public final TableField<HotelRecord, String> ADDRESS = createField(DSL.name("address_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.hotels.phone_</code>.
     */
    public final TableField<HotelRecord, String> PHONE = createField(DSL.name("phone_"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.hotels.city_id_</code>.
     */
    public final TableField<HotelRecord, Long> CITY_ID = createField(DSL.name("city_id_"), SQLDataType.BIGINT, this, "");

    private Hotels(Name alias, Table<HotelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Hotels(Name alias, Table<HotelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.hotels</code> table reference
     */
    public Hotels(String alias) {
        this(DSL.name(alias), HOTELS);
    }

    /**
     * Create an aliased <code>public.hotels</code> table reference
     */
    public Hotels(Name alias) {
        this(alias, HOTELS);
    }

    /**
     * Create a <code>public.hotels</code> table reference
     */
    public Hotels() {
        this(DSL.name("hotels"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<HotelRecord, Long> getIdentity() {
        return (Identity<HotelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HotelRecord> getPrimaryKey() {
        return Keys.HOTELS_PKEY;
    }

    @Override
    public Hotels as(String alias) {
        return new Hotels(DSL.name(alias), this);
    }

    @Override
    public Hotels as(Name alias) {
        return new Hotels(alias, this);
    }

    @Override
    public Hotels as(Table<?> alias) {
        return new Hotels(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hotels rename(String name) {
        return new Hotels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hotels rename(Name name) {
        return new Hotels(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hotels rename(Table<?> name) {
        return new Hotels(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels where(Condition condition) {
        return new Hotels(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hotels where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hotels where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hotels where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Hotels where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Hotels whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
