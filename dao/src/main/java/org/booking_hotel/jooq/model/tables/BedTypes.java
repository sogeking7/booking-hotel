/*
 * This file is generated by jOOQ.
 */
package org.booking_hotel.jooq.model.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.booking_hotel.jooq.model.Keys;
import org.booking_hotel.jooq.model.Public;
import org.booking_hotel.jooq.model.tables.records.BedTypeRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BedTypes extends TableImpl<BedTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bed_types</code>
     */
    public static final BedTypes BED_TYPES = new BedTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BedTypeRecord> getRecordType() {
        return BedTypeRecord.class;
    }

    /**
     * The column <code>public.bed_types.id_</code>.
     */
    public final TableField<BedTypeRecord, Long> ID = createField(DSL.name("id_"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.bed_types.created_at_</code>.
     */
    public final TableField<BedTypeRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at_"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.bed_types.updated_at_</code>.
     */
    public final TableField<BedTypeRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at_"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.bed_types.removed_</code>.
     */
    public final TableField<BedTypeRecord, Boolean> REMOVED = createField(DSL.name("removed_"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.bed_types.name_</code>.
     */
    public final TableField<BedTypeRecord, String> NAME = createField(DSL.name("name_"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>public.bed_types.icon_ref_</code>.
     */
    public final TableField<BedTypeRecord, String> ICON_REF = createField(DSL.name("icon_ref_"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    private BedTypes(Name alias, Table<BedTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BedTypes(Name alias, Table<BedTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bed_types</code> table reference
     */
    public BedTypes(String alias) {
        this(DSL.name(alias), BED_TYPES);
    }

    /**
     * Create an aliased <code>public.bed_types</code> table reference
     */
    public BedTypes(Name alias) {
        this(alias, BED_TYPES);
    }

    /**
     * Create a <code>public.bed_types</code> table reference
     */
    public BedTypes() {
        this(DSL.name("bed_types"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BedTypeRecord, Long> getIdentity() {
        return (Identity<BedTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BedTypeRecord> getPrimaryKey() {
        return Keys.BED_TYPES_PKEY;
    }

    @Override
    public BedTypes as(String alias) {
        return new BedTypes(DSL.name(alias), this);
    }

    @Override
    public BedTypes as(Name alias) {
        return new BedTypes(alias, this);
    }

    @Override
    public BedTypes as(Table<?> alias) {
        return new BedTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BedTypes rename(String name) {
        return new BedTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BedTypes rename(Name name) {
        return new BedTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BedTypes rename(Table<?> name) {
        return new BedTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes where(Condition condition) {
        return new BedTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BedTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BedTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BedTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BedTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BedTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
